// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  bio           String?       @db.VarChar(255)
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  tweets        Tweet[]
  likes         Like[]
  likesComment  LikeComment[]
  followers     Follower[]    @relation("Followers")
  following     Follower[]    @relation("Following")
  bookmarks     Bookmark[]
  comments      Comment[]
  retweets      Retweet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Tweet {
  id        Int        @id @default(autoincrement())
  body      String     @db.VarChar(255)
  authorId  String
  likes     Like[]
  bookmarks Bookmark[]
  author    User       @relation(fields: [authorId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  retweets  Retweet[]
}

model Retweet {
  id        Int      @id @default(autoincrement())
  tweetId   Int
  userId    String
  createdAt DateTime

  tweet Tweet @relation(fields: [tweetId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  userId    String
  tweetId   Int

  user  User          @relation(fields: [userId], references: [id])
  tweet Tweet         @relation(fields: [tweetId], references: [id])
  like  LikeComment[]
}

model LikeComment {
  id        Int     @id @default(autoincrement())
  commentId Int
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  tweetId   Int
  user      User     @relation(fields: [userId], references: [id])
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, tweetId])
}

model Follower {
  id          Int      @id @default(autoincrement())
  followerId  String
  followingId String
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  tweetId   Int
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
